
DROP TABLE
IF EXISTS jangles_users;

CREATE TABLE jangles_users (
  user_id BIGINT (20) NOT NULL AUTO_INCREMENT,
  username VARCHAR (25) DEFAULT NULL,
  PASSWORD VARCHAR (50) DEFAULT NULL,
  display_name VARCHAR (50) DEFAULT NULL,
  date_created TIMESTAMP NULL DEFAULT NULL,
  is_active TINYINT (1) DEFAULT NULL,
  PRIMARY KEY (user_id)
);

INSERT INTO jangles_users (user_id, username, password, display_name, date_created, is_active) VALUES (1, 'Bopper', 'password', 'Bopper Johnson', '2017-05-29 09:56:25', 1);
INSERT INTO jangles_users (user_id, username, password, display_name, date_created, is_active) VALUES (2, 'Bipper', 'password', 'Bipper Blaster', '2017-05-29 09:56:45', 1);
INSERT INTO jangles_users (user_id, username, password, display_name, date_created, is_active) VALUES (3, 'Smoker', 'password', 'Smoker Sql', '2017-05-29 09:57:06', 1);

--------------------------
-- Table structure for posts
-- ----------------------------
DROP TABLE IF EXISTS posts;
CREATE TABLE posts (
  post_id bigint(20) NOT NULL AUTO_INCREMENT,
  user_id bigint(20) NOT NULL,
  post_title varchar(200) NOT NULL,
  post_name varchar(200) NOT NULL,
  post_link varchar(255) DEFAULT NULL,
  post_date timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  post_modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  post_type varchar(20) NOT NULL DEFAULT 'LINK',
  display_type varchar(20) NOT NULL DEFAULT 'LINK',
  is_published tinyint(1) NOT NULL DEFAULT '0',
  post_content varchar(5000) NOT NULL,
  post_source varchar(50) DEFAULT 'NA',
  post_image varchar(200) DEFAULT NULL,
  click_count int(11) NOT NULL DEFAULT '0',
  likes_count int(11) NOT NULL DEFAULT '0',
  value_rating int(11) NOT NULL DEFAULT '0',
  version int(11) NOT NULL DEFAULT '0',
  UNIQUE KEY posts_post_id_uindex (post_id),
  UNIQUE KEY posts_post_name_pk (post_name),
  PRIMARY KEY (post_id)
);


INSERT INTO posts (user_id, post_title, post_name, post_link, post_date, post_modified, post_type, display_type, is_published, post_content, post_source, post_image, click_count, likes_count, value_rating, version) VALUES (1, 'REST Notes: JAX-RS, Jersey and Jackson', 'rest-notes-jax-rs-jersey-and-jackson', null, '2017-07-06 18:34:11', '2017-07-09 10:01:19', 'POST', 'POST', 1, '<p>We&#39;re going to be talking a lot about a new REST-based NixMash Cloud application we&#39;re building, but&nbsp;before diving in to the application we wanted to review some of the technologies that make up a RESTful Application: JAX-RS, Jersey and Jackson.</p>', 'NA', null, 0, 0, 0, 9);
INSERT INTO posts (user_id, post_title, post_name, post_link, post_date, post_modified, post_type, display_type, is_published, post_content, post_source, post_image, click_count, likes_count, value_rating, version) VALUES (1, 'Microservice Applications with Bootique', 'microservice-applications-with-bootique', null, '2017-07-12 11:08:48', '2017-07-14 08:57:19', 'POST', 'POST', 1, '<p>If you&#39;ve been following this blog&nbsp;you know I recently built a Microservice starter application with Spring Cloud. With Spring Cloud I was quickly able to assemble a Cloud Config server, an MVC Web Client, a REST Resource Service, and a Eureka Server for service discovery. You can find the app&nbsp;<a href="https://github.com/mintster/nixmash-spring-cloud">on GitHub</a></p>', 'NA', null, 0, 0, 0, 15);
INSERT INTO posts (user_id, post_title, post_name, post_link, post_date, post_modified, post_type, display_type, is_published, post_content, post_source, post_image, click_count, likes_count, value_rating, version) VALUES (1, 'Retrieving CKEditor Textarea Content with JavaScript', 'retrieving-ckeditor-textarea-content-with-javascript', null, '2017-07-13 15:52:38', '2017-07-14 08:57:07', 'POST', 'POST', 1, '<p>A NixMash Blog update has been pushed <a href="https://github.com/mintster/nixmash-blog">to GitHub</a> with the fix for Post Content not being saved properly in post backups. The fix is described in this post.</p>', 'NA', null, 0, 0, 0, 5);
INSERT INTO posts (user_id, post_title, post_name, post_link, post_date, post_modified, post_type, display_type, is_published, post_content, post_source, post_image, click_count, likes_count, value_rating, version) VALUES (1, 'A Mustache MVC Example App with Bootique', 'a-mustache-mvc-example-app-with-bootique', null, '2017-07-14 08:52:53', '2017-07-14 09:00:25', 'POST', 'POST', 1, '<p>Bootique supports a number of modules that integrate technologies like JCache, JDBC, Jersey REST and RabbitMQ. See the&nbsp;<a href="http://bootique.io/docs/">complete list of Bootique modules here</a>. Bootique integrates Jersey MVC and the Mustache Templating Engine in <a href="https://github.com/bootique/bootique-mvc">bootique-mvc</a>. While most of the Bootique modules include example code, <strong>bootique-mvc</strong> currently does not. I thought I&#39;d write one for my own benefit and for anyone else interested in Bootique. You&#39;ll find it <a href="https://github.com/mintster/bootique-mvc-demo">on GitHub</a>.</p>', 'NA', null, 0, 0, 0, 4);
INSERT INTO posts (user_id, post_title, post_name, post_link, post_date, post_modified, post_type, display_type, is_published, post_content, post_source, post_image, click_count, likes_count, value_rating, version) VALUES (1, 'Retrieving REST Data Object Lists with Jersey and Jackson', 'retrieving-rest-data-object-lists-with-jersey-and-jackson', null, '2017-07-14 16:19:19', '2017-07-14 16:39:37', 'POST', 'POST', 1, '<p>In this post we are going to take JSON retrieved from a Microservice and convert it into a <samp>List&lt;POJO&gt;</samp> in our Web Client. On the Microservice we&#39;ll use Jackson to package the <samp>List&lt;POJO&gt;</samp> and Jersey to transmit it as a <em>REST</em> Resource in JSON. On the Client we&#39;ll use Jersey to handle the Response and Jackson to convert the JSON content back to its original state of <samp>List&lt;POJO&gt;</samp>.</p>', 'NA', null, 0, 0, 0, 11);
INSERT INTO posts (user_id, post_title, post_name, post_link, post_date, post_modified, post_type, display_type, is_published, post_content, post_source, post_image, click_count, likes_count, value_rating, version) VALUES (1, 'Custom REST Links with Jersey Conditional Link Injection', 'custom-rest-links-with-jersey-conditional-link-injection', null, '2017-07-18 09:51:46', '2017-07-18 10:15:26', 'POST', 'POST', 1, '<p>The &quot;RE&quot; in REST stands for <em>&quot;Representational&quot;,</em> with <em>&quot;State Transfer&quot;</em> completing the acronym. In this post we&#39;ll look at using Jersey to conditionally inject custom links in our REST Resources.</p>', 'NA', null, 0, 0, 0, 19);
INSERT INTO posts (user_id, post_title, post_name, post_link, post_date, post_modified, post_type, display_type, is_published, post_content, post_source, post_image, click_count, likes_count, value_rating, version) VALUES (1, 'Configuring Jersey Declarative Linking in Bootique', 'configuring-jersey-declarative-linking-in-bootique', null, '2017-07-18 14:10:54', '2017-07-19 07:25:35', 'POST', 'POST', 1, '<p>In my <a href="http://nixmash.com/post/custom-rest-links-with-jersey-conditional-link-injection">previous post</a> we talked about creating custom REST links with Jersey Declarative Linking. Configuring it for Bootique is extremely simple, but it&#39;s different than the Jersey Documentation on configuring it in a typical JAX-RS Application.&nbsp;</p>', 'NA', null, 0, 0, 0, 5);
INSERT INTO posts (user_id, post_title, post_name, post_link, post_date, post_modified, post_type, display_type, is_published, post_content, post_source, post_image, click_count, likes_count, value_rating, version) VALUES (1, 'Roll Your Own Mustache Template Resolver in Bootique MVC', 'roll-your-own-mustache-template-resolver-in-bootique-mvc', null, '2017-07-19 14:22:23', '2017-07-19 14:43:15', 'POST', 'POST', 1, '<p>I recently <a href="http://nixmash.com/post/a-mustache-mvc-example-app-with-bootique">blogged about</a> my Bootique Mustache MVC Example Project on GitHub <a href="https://github.com/mintster/bootique-mvc-demo">here</a>. If you recall we touched on displaying Mustache Templates with Bootique <samp>AbstractView</samp>. That works well, but with the caveat that Mustache Templates must be in the same package as the View.</p>', 'NA', null, 0, 0, 0, 10);
INSERT INTO posts (user_id, post_title, post_name, post_link, post_date, post_modified, post_type, display_type, is_published, post_content, post_source, post_image, click_count, likes_count, value_rating, version) VALUES (1, 'Adding Static Paths in Bootique', 'adding-static-paths-in-bootique', null, '2017-07-19 15:29:59', '2017-08-08 12:06:23', 'POST', 'POST', 1, '<p>If you&#39;re using Bootique Jetty, MVC or another web-based Bootique module you&#39;ll probably want to add a static path to your&nbsp;<samp>/css</samp> and other resource directories. In this short post we&#39;ll do just that. You can find the code in the&nbsp;<a href="https://github.com/mintster/nixmash-microservices">NixMash Microservices</a> Web Client module.</p>', 'NA', null, 0, 0, 0, 7);
INSERT INTO posts (user_id, post_title, post_name, post_link, post_date, post_modified, post_type, display_type, is_published, post_content, post_source, post_image, click_count, likes_count, value_rating, version) VALUES (1, 'Localized Resource Properties with Java Mustache', 'localized-resource-properties-with-java-mustache', null, '2017-07-20 10:51:43', '2017-07-20 11:03:03', 'POST', 'POST', 1, '<p>One of the hallmarks of Mustache in its purest form is the idea of being &quot;logic free,&quot; making it simple and very fast. The Bootique MVC Module uses the <a href="https://github.com/spullara/mustache.java">Spullara Java Mustache implementation</a> which seems to be very close to the original &quot;logic free&quot; ideal. With that in mind I thought I&#39;d have to roll my own function for displaying Localized Resource Properties, but I happily discovered it is already baked in to the Spullara Mustache implementation. And as we&#39;ll see, it is very easy to use as well.</p>', 'NA', null, 0, 0, 0, 6);
INSERT INTO posts (user_id, post_title, post_name, post_link, post_date, post_modified, post_type, display_type, is_published, post_content, post_source, post_image, click_count, likes_count, value_rating, version) VALUES (1, 'Testing MVC Controller Methods with REST Endpoints in JUnit', 'testing-mvc-controller-methods-with-rest-endpoints-in-junit', null, '2017-07-21 10:27:50', '2017-07-21 11:01:09', 'POST', 'POST', 1, '<p>Our <a href="https://github.com/mintster/nixmash-microservices">NixMash Microservices app</a> currently has a <strong>UserService</strong> REST Service, a <strong>Web</strong> Client, and <a href="https://github.com/mintster/jangles">NixMash <strong>Jangles</strong></a> as a shared library for POJOs and such.</p>', 'NA', null, 0, 0, 0, 4);
INSERT INTO posts (user_id, post_title, post_name, post_link, post_date, post_modified, post_type, display_type, is_published, post_content, post_source, post_image, click_count, likes_count, value_rating, version) VALUES (1, 'Multiple Bootique Module Shaded Jars with Maven', 'multiple-bootique-module-shaded-jars-with-maven', null, '2017-07-21 11:48:07', '2017-08-08 12:06:01', 'POST', 'POST', 1, '<p>The <strong>UserService</strong> and <strong>Web</strong> Client Modules of our <a href="https://github.com/mintster/nixmash-microservices">NixMash Microservice app</a> are <a href="http://bootique.io/">Bootique</a> modules, which we want to package as runnable jars with Maven.</p>', 'NA', null, 0, 0, 0, 5);
INSERT INTO posts (user_id, post_title, post_name, post_link, post_date, post_modified, post_type, display_type, is_published, post_content, post_source, post_image, click_count, likes_count, value_rating, version) VALUES (1, 'A Bootique Shiro Demo Application', 'a-bootique-shiro-demo-application', null, '2017-08-08 10:16:43', '2017-08-08 12:51:23', 'POST', 'POST', 1, '<p>I just pushed a new Bootique Shiro Demo Application <a href="https://github.com/mintster/bootique-shiro-demo">to GitHub</a>. We&#39;ll cover the basics in this post and the details later. The app uses the following Bootique Modules: Jetty, MVC, Shiro and JDBC. Those also bring us the services of Jersey and Mustache.</p>', 'NA', null, 0, 0, 0, 7);
INSERT INTO posts (user_id, post_title, post_name, post_link, post_date, post_modified, post_type, display_type, is_published, post_content, post_source, post_image, click_count, likes_count, value_rating, version) VALUES (1, 'A Custom Shiro Realm Example with Bootique', 'a-custom-shiro-realm-example-with-bootique', null, '2017-08-08 12:01:23', '2017-08-08 16:15:07', 'POST', 'POST', 1, '<p>With Bootique you can specify users and role is your <samp>bootique.yml</samp> file, but for most use cases we need to retrieve user information from some other data source. For that we need to create our own Shiro Realm to retrieve and authorize our users. In this post we&#39;ll look at a custom Shiro Realm found in my Bootique Shiro Demo app <a href="https://github.com/mintster/bootique-shiro-demo">on GitHub</a>.</p>', 'NA', null, 0, 0, 0, 4);
INSERT INTO posts (user_id, post_title, post_name, post_link, post_date, post_modified, post_type, display_type, is_published, post_content, post_source, post_image, click_count, likes_count, value_rating, version) VALUES (1, 'Characteristics of Shiro User Authentication with REST', 'a-forum-thread-on-shiro-user-authentication-with-rest', 'http://shiro-user.582556.n2.nabble.com/REST-based-token-auth-approach-td7577677.html', '2017-08-08 12:30:11', '2017-08-08 12:32:20', 'LINK', 'LINK', 1, '<p>This is a very informative forum thread on approaches to Shiro User Authentication for REST applications. Several takeaways, one being to set any REST paths with the&nbsp;<samp>noSessionCreation</samp> filter.&nbsp;</p>', 'shiro-user.582556.n2.nabble.com', null, 0, 0, 0, 4);
INSERT INTO posts (user_id, post_title, post_name, post_link, post_date, post_modified, post_type, display_type, is_published, post_content, post_source, post_image, click_count, likes_count, value_rating, version) VALUES (1, 'Custom Role Filters with Bootique Shiro Web', 'custom-role-filters-with-bootique-shiro-web', null, '2017-08-08 15:15:27', '2017-08-08 15:30:10', 'POST', 'POST', 1, '<p>In this post we&#39;re going to discuss adding a custom Role Filter to Bootique Shiro Web. We&#39;ll be using my Bootique Shiro Demo app <a href="https://github.com/mintster/bootique-shiro-demo">on GitHub</a> for the source code.</p>', 'NA', null, 0, 0, 0, 10);
INSERT INTO posts (user_id, post_title, post_name, post_link, post_date, post_modified, post_type, display_type, is_published, post_content, post_source, post_image, click_count, likes_count, value_rating, version) VALUES (1, 'Using Encrypted Passwords in Shiro', 'using-encrypted-passwords-in-shiro', null, '2017-08-08 16:16:42', '2017-08-08 16:45:11', 'POST', 'POST', 1, '<p>This is one of those topics that&nbsp;generates opinion on alternatives and improvement, but for our purposes we&#39;re going to cover using encrypted passwords in Shiro from the standpoint of simplicity with a reasonable amount of security. The source code can be found in my Bootique Shiro Demo app <a href="https://github.com/mintster/bootique-shiro-demo">on GitHub</a>.</p>', 'NA', null, 0, 0, 0, 12);
